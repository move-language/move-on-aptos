
=== Processing m::if_1 =====================================================
--- Source
fun if_1(c: bool): u8 {
        let result = 0;
        if (c) {
            result = 1;
        };
        result
    }

--- Stackless Bytecode
fun m::if_1($t0|c: bool): u8 {
     var $t1|result: u8
     var $t2: u8
     var $t3: bool
     var $t4: u8
     var $t5: u8
  0: $t2 := 0
  1: $t1 := $t2
  2: $t3 := move($t0)
  3: if ($t3) goto 4 else goto 8
  4: label L1
  5: $t4 := 1
  6: $t1 := $t4
  7: goto 8
  8: label L0
  9: $t5 := move($t1)
 10: return $t5
}

--- Raw Generated AST
_t2: u8 = 0;
_t1: u8 = _t2;
_t3: bool = c;
loop {
  if (Not(_t3)) break;
  _t4: u8 = 1;
  _t1: u8 = _t4;
  break
};
_t5: u8 = _t1;
return _t5

--- If-Transformed Generated AST
_t2: u8 = 0;
_t1: u8 = _t2;
_t3: bool = c;
if _t3 {
  _t4: u8 = 1;
  _t1: u8 = _t4
};
_t5: u8 = _t1;
return _t5

--- Assign-Transformed Generated AST
{
  let _t1: u8 = 0;
  if c {
    _t1: u8 = 1
  };
  return _t1
}


=== Processing m::if_else_1 =====================================================
--- Source
fun if_else_1(c: bool): u8 {
        if (c) 1 else 2
    }

--- Stackless Bytecode
fun m::if_else_1($t0|c: bool): u8 {
     var $t1|return: u8
     var $t2: bool
     var $t3: u8
     var $t4: u8
     var $t5: u8
  0: $t2 := move($t0)
  1: if ($t2) goto 2 else goto 6
  2: label L1
  3: $t3 := 1
  4: $t1 := $t3
  5: goto 10
  6: label L0
  7: $t4 := 2
  8: $t1 := $t4
  9: goto 10
 10: label L2
 11: $t5 := move($t1)
 12: return $t5
}

--- Raw Generated AST
_t2: bool = c;
loop {
  loop {
    if (Not(_t2)) break;
    _t3: u8 = 1;
    _t1: u8 = _t3;
    break[1]
  };
  _t4: u8 = 2;
  _t1: u8 = _t4;
  break
};
_t5: u8 = _t1;
return _t5

--- If-Transformed Generated AST
_t2: bool = c;
if _t2 {
  _t3: u8 = 1;
  _t1: u8 = _t3
} else {
  _t4: u8 = 2;
  _t1: u8 = _t4
};
_t5: u8 = _t1;
return _t5

--- Assign-Transformed Generated AST
{
  let _t1: u8;
  if c {
    _t1: u8 = 1
  } else {
    _t1: u8 = 2
  };
  return _t1
}


=== Processing m::if_else_2 =====================================================
--- Source
fun if_else_2(c: bool, d: bool): u8 {
        if (c) {
            if (d) {
                1
            } else {
                2
            }
        } else {
            3
        }
    }

--- Stackless Bytecode
fun m::if_else_2($t0|c: bool, $t1|d: bool): u8 {
     var $t2|return: u8
     var $t3: bool
     var $t4: bool
     var $t5: u8
     var $t6: u8
     var $t7: u8
     var $t8: u8
  0: $t3 := move($t0)
  1: if ($t3) goto 2 else goto 15
  2: label L1
  3: $t4 := move($t1)
  4: if ($t4) goto 5 else goto 9
  5: label L3
  6: $t5 := 1
  7: $t2 := $t5
  8: goto 13
  9: label L2
 10: $t6 := 2
 11: $t2 := $t6
 12: goto 13
 13: label L4
 14: goto 19
 15: label L0
 16: $t7 := 3
 17: $t2 := $t7
 18: goto 19
 19: label L5
 20: $t8 := move($t2)
 21: return $t8
}

--- Raw Generated AST
_t3: bool = c;
loop {
  loop {
    if (_t3) break;
    _t7: u8 = 3;
    _t2: u8 = _t7;
    break[1]
  };
  _t4: bool = d;
  loop {
    loop {
      if (Not(_t4)) break;
      _t5: u8 = 1;
      _t2: u8 = _t5;
      break[1]
    };
    _t6: u8 = 2;
    _t2: u8 = _t6;
    break
  };
  break
};
_t8: u8 = _t2;
return _t8

--- If-Transformed Generated AST
_t3: bool = c;
if _t3 {
  _t4: bool = d;
  if _t4 {
    _t5: u8 = 1;
    _t2: u8 = _t5
  } else {
    _t6: u8 = 2;
    _t2: u8 = _t6
  }
} else {
  _t7: u8 = 3;
  _t2: u8 = _t7
};
_t8: u8 = _t2;
return _t8

--- Assign-Transformed Generated AST
{
  let _t2: u8;
  if c {
    if d {
      _t2: u8 = 1
    } else {
      _t2: u8 = 2
    }
  } else {
    _t2: u8 = 3
  };
  return _t2
}


=== Processing m::if_else_3 =====================================================
--- Source
fun if_else_3(c: bool): u64 {
        let r = if (c) 1 else 2;
        r
    }

--- Stackless Bytecode
fun m::if_else_3($t0|c: bool): u64 {
     var $t1|r: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := move($t0)
  1: if ($t2) goto 2 else goto 6
  2: label L1
  3: $t3 := 1
  4: $t1 := $t3
  5: goto 10
  6: label L0
  7: $t4 := 2
  8: $t1 := $t4
  9: goto 10
 10: label L2
 11: $t5 := move($t1)
 12: return $t5
}

--- Raw Generated AST
_t2: bool = c;
loop {
  loop {
    if (Not(_t2)) break;
    _t3: u64 = 1;
    _t1: u64 = _t3;
    break[1]
  };
  _t4: u64 = 2;
  _t1: u64 = _t4;
  break
};
_t5: u64 = _t1;
return _t5

--- If-Transformed Generated AST
_t2: bool = c;
if _t2 {
  _t3: u64 = 1;
  _t1: u64 = _t3
} else {
  _t4: u64 = 2;
  _t1: u64 = _t4
};
_t5: u64 = _t1;
return _t5

--- Assign-Transformed Generated AST
{
  let _t1: u64;
  if c {
    _t1: u64 = 1
  } else {
    _t1: u64 = 2
  };
  return _t1
}


=== Processing m::if_else_with_shard_exp =====================================================
--- Source
fun if_else_with_shard_exp(x: u64): u64 {
        let y = x + x;
        let z = y * y;
        if (z > 0) z + 1 else z - 1
    }

--- Stackless Bytecode
fun m::if_else_with_shard_exp($t0|x: u64): u64 {
     var $t1|$t5: u64
     var $t2|$t7: u64 [unused]
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: bool
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: u64
     var $t18: u64
  0: $t3 := copy($t0)
  1: $t4 := move($t0)
  2: $t5 := +($t3, $t4)
  3: $t0 := $t5
  4: $t6 := copy($t0)
  5: $t7 := move($t0)
  6: $t8 := *($t6, $t7)
  7: $t0 := $t8
  8: $t9 := copy($t0)
  9: $t10 := 0
 10: $t11 := >($t9, $t10)
 11: if ($t11) goto 12 else goto 18
 12: label L1
 13: $t12 := move($t0)
 14: $t13 := 1
 15: $t14 := +($t12, $t13)
 16: $t1 := $t14
 17: goto 24
 18: label L0
 19: $t15 := move($t0)
 20: $t16 := 1
 21: $t17 := -($t15, $t16)
 22: $t1 := $t17
 23: goto 24
 24: label L2
 25: $t18 := move($t1)
 26: return $t18
}

--- Raw Generated AST
_t3: u64 = x;
_t4: u64 = x;
_t5: u64 = Add(_t3, _t4);
x: u64 = _t5;
_t6: u64 = x;
_t7: u64 = x;
_t8: u64 = Mul(_t6, _t7);
x: u64 = _t8;
_t9: u64 = x;
_t10: u64 = 0;
_t11: bool = Gt(_t9, _t10);
loop {
  loop {
    if (Not(_t11)) break;
    _t12: u64 = x;
    _t13: u64 = 1;
    _t14: u64 = Add(_t12, _t13);
    _t1: u64 = _t14;
    break[1]
  };
  _t15: u64 = x;
  _t16: u64 = 1;
  _t17: u64 = Sub(_t15, _t16);
  _t1: u64 = _t17;
  break
};
_t18: u64 = _t1;
return _t18

--- If-Transformed Generated AST
_t3: u64 = x;
_t4: u64 = x;
_t5: u64 = Add(_t3, _t4);
x: u64 = _t5;
_t6: u64 = x;
_t7: u64 = x;
_t8: u64 = Mul(_t6, _t7);
x: u64 = _t8;
_t9: u64 = x;
_t10: u64 = 0;
_t11: bool = Gt(_t9, _t10);
if _t11 {
  _t12: u64 = x;
  _t13: u64 = 1;
  _t14: u64 = Add(_t12, _t13);
  _t1: u64 = _t14
} else {
  _t15: u64 = x;
  _t16: u64 = 1;
  _t17: u64 = Sub(_t15, _t16);
  _t1: u64 = _t17
};
_t18: u64 = _t1;
return _t18

--- Assign-Transformed Generated AST
{
  let _t1: u64;
  {
    let x: u64 = Add(x, x);
    {
      let x: u64 = Mul(x, x);
      if Gt(x, 0) {
        _t1: u64 = Add(x, 1)
      } else {
        _t1: u64 = Sub(x, 1)
      };
      return _t1
    }
  }
}

=== Sourcified Output ============================================
module 0x815::m {
    fun if_1(c: bool): u8 {
        let _t1 = 0u8;
        if (c) _t1 = 1u8;
        _t1
    }
    fun if_else_1(c: bool): u8 {
        let _t1;
        if (c) _t1 = 1u8 else _t1 = 2u8;
        _t1
    }
    fun if_else_2(c: bool, d: bool): u8 {
        let _t2;
        if (c) if (d) _t2 = 1u8 else _t2 = 2u8 else _t2 = 3u8;
        _t2
    }
    fun if_else_3(c: bool): u64 {
        let _t1;
        if (c) _t1 = 1 else _t1 = 2;
        _t1
    }
    fun if_else_with_shard_exp(x: u64): u64 {
        let _t1;
        let x = x + x;
        let x = x * x;
        if (x > 0) _t1 = x + 1 else _t1 = x - 1;
        _t1
    }
}
