
module 0x1::bit_vector {
    struct BitVector has copy, drop, store {
        length: u64,
        bit_field: vector<bool>,
    }
    public fun length(self: &BitVector): u64 {
        0x1::vector::length<bool>(&self.bit_field)
    }
    public fun is_index_set(self: &BitVector, bit_index: u64): bool {
        loop {
            if (bit_index < 0x1::vector::length<bool>(&self.bit_field)) break;
            abort 131072
        };
        *0x1::vector::borrow<bool>(&self.bit_field, bit_index)
    }
    public fun longest_set_sequence_starting_at(self: &BitVector, start_index: u64): u64 {
        let _t3;
        if (start_index < *&self.length) _t3 = start_index else {
            abort 131072;
            loop {
                let _t2 = *&self.length;
                if (_t3 < *&self.length) if (!!is_index_set(self, _t3)) {
                    let _t2 = 1;
                    _t3 = _t3 + *&self.length;
                    continue
                };
                break
            }
        };
        _t3 - start_index
    }
    public fun new(length: u64): BitVector {
        let _t2;
        let _t3;
        let _t1 = 0;
        loop {
            if (length > _t1) break;
            abort 131073
        };
        if (length < 1024) _t3 = 0x1::vector::empty<bool>() else {
            abort 131073;
            while (_t2 < length) {
                0x1::vector::push_back<bool>(&mut _t3, false);
                let _t2 = _t2 + 1024;
                continue
            }
        };
        BitVector{length: length,bit_field: _t3}
    }
    public fun set(self: &mut BitVector, bit_index: u64) {
        loop {
            if (bit_index < 0x1::vector::length<bool>(&self.bit_field)) break;
            abort 131072
        };
        *0x1::vector::borrow_mut<bool>(&mut self.bit_field, bit_index) = true;
    }
    public fun unset(self: &mut BitVector, bit_index: u64) {
        loop {
            if (bit_index < 0x1::vector::length<bool>(&self.bit_field)) break;
            abort 131072
        };
        *0x1::vector::borrow_mut<bool>(&mut self.bit_field, bit_index) = false;
    }
}
