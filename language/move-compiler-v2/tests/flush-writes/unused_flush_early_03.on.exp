============ after FlushWritesProcessor: ================

[variant baseline]
fun m::bar() {
     # live vars:
  0: return ()
}


[variant baseline]
fun m::foo(): (u64, u64, u64) {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: $t1 := 2
     # live vars: $t0, $t1
  2: $t2 := 3
     # live vars: $t0, $t1, $t2
  3: return ($t0, $t1, $t2)
}


[variant baseline]
public fun m::test1() {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: bool [unused]
     var $t6: u64 [unused]
     var $t7: bool [unused]
     var $t8: u64 [unused]
     # flush: $t1, $t2
     # live vars:
  0: ($t0, $t1, $t2) := m::foo()
     # live vars: $t0, $t1, $t2
  1: $t4 := 0
     # live vars: $t0, $t1, $t2, $t4
  2: $t3 := ==($t0, $t4)
     # live vars: $t1, $t2, $t3
  3: if ($t3) goto 4 else goto 7
     # live vars: $t1, $t2
  4: label L0
     # live vars: $t1, $t2
  5: m::bar()
     # live vars: $t1, $t2
  6: goto 8
     # live vars: $t1, $t2
  7: label L1
     # live vars: $t1, $t2
  8: label L2
     # live vars: $t1, $t2
  9: $t0 := 0
     # live vars: $t0, $t1, $t2
 10: $t3 := ==($t1, $t0)
     # live vars: $t2, $t3
 11: if ($t3) goto 12 else goto 15
     # live vars: $t2
 12: label L3
     # live vars: $t2
 13: m::bar()
     # live vars: $t2
 14: goto 16
     # live vars: $t2
 15: label L4
     # live vars: $t2
 16: label L5
     # live vars: $t2
 17: $t0 := 0
     # live vars: $t0, $t2
 18: $t3 := ==($t2, $t0)
     # live vars: $t3
 19: if ($t3) goto 20 else goto 23
     # live vars:
 20: label L6
     # live vars:
 21: m::bar()
     # live vars:
 22: goto 24
     # live vars:
 23: label L7
     # live vars:
 24: label L8
     # live vars:
 25: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


bar() /* def_idx: 0 */ {
B0:
	0: Ret
}
foo(): u64 * u64 * u64 /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: LdU64(2)
	2: LdU64(3)
	3: Ret
}
public test1() /* def_idx: 2 */ {
L0:	loc0: u64
L1:	loc1: u64
L2:	loc2: u64
B0:
	0: Call foo(): u64 * u64 * u64
	1: StLoc[0](loc0: u64)
	2: StLoc[1](loc1: u64)
	3: LdU64(0)
	4: Eq
	5: BrFalse(8)
B1:
	6: Call bar()
	7: Branch(8)
B2:
	8: MoveLoc[1](loc1: u64)
	9: LdU64(0)
	10: Eq
	11: BrFalse(14)
B3:
	12: Call bar()
	13: Branch(14)
B4:
	14: MoveLoc[0](loc0: u64)
	15: LdU64(0)
	16: Eq
	17: BrFalse(20)
B5:
	18: Call bar()
	19: Branch(20)
B6:
	20: Ret
}
}
============ bytecode verification succeeded ========
