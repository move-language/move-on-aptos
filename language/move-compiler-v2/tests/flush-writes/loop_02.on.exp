============ after FlushWritesProcessor: ================

[variant baseline]
fun m::inc($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     # live vars: $t0
  0: $t2 := 1
     # live vars: $t0, $t2
  1: $t0 := +($t0, $t2)
     # live vars: $t0
  2: return $t0
}


[variant baseline]
public fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: bool
     var $t3: u64 [unused]
     # flush: $t0
     # live vars:
  0: $t0 := 0
     # live vars: $t0
  1: label L0
     # live vars: $t0
  2: $t1 := m::inc($t0)
     # live vars: $t1
  3: $t0 := move($t1)
     # live vars: $t0
  4: $t1 := 10
     # live vars: $t0, $t1
  5: $t2 := >($t0, $t1)
     # live vars: $t0, $t2
  6: if ($t2) goto 7 else goto 1
     # live vars: $t0
  7: label L2
     # live vars:
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


inc(Arg0: u64): u64 /* def_idx: 0 */ {
L1:	loc0: u64
B0:
	0: MoveLoc[0](Arg0: u64)
	1: LdU64(1)
	2: Add
	3: Ret
}
public test() /* def_idx: 1 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
B1:
	2: MoveLoc[0](loc0: u64)
	3: Call inc(u64): u64
	4: StLoc[0](loc0: u64)
	5: CopyLoc[0](loc0: u64)
	6: LdU64(10)
	7: Gt
	8: BrFalse(2)
B2:
	9: Ret
}
}
============ bytecode verification succeeded ========
