// -- Model dump before env processor pipeline:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor unused checks:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor type parameter check:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor check recursive struct definition:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor check cyclic type instantiation:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor unused struct params check:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor access and use check before inlining:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor inlining:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor access and use check after inlining:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor acquires check:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor simplifier:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = |i: u64| Add<u64>(i, 1);
          Tuple()
        }
    }
} // end 0x8675309::M


// -- Model dump after env processor lambda-lifting:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = closure M::lambda_not_allowed$lambda$1();
          Tuple()
        }
    }
    private fun lambda_not_allowed$lambda$1(i: u64): u64 {
        Add<u64>(i, 1)
    }
} // end 0x8675309::M


// -- Model dump after env processor specification checker:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = closure M::lambda_not_allowed$lambda$1();
          Tuple()
        }
    }
    private fun lambda_not_allowed$lambda$1(i: u64): u64 {
        Add<u64>(i, 1)
    }
} // end 0x8675309::M


// -- Model dump after env processor specification rewriter:
module 0x8675309::M {
    public fun lambda_not_allowed() {
        {
          let _x: |u64|u64 = closure M::lambda_not_allowed$lambda$1();
          Tuple()
        }
    }
    private fun lambda_not_allowed$lambda$1(i: u64): u64 {
        Add<u64>(i, 1)
    }
} // end 0x8675309::M



Diagnostics:
error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/lambda3.move:77:18
   │
77 │         let _x = |i| i + 1; // expected lambda not allowed
   │                  ^^^^^^^^^
