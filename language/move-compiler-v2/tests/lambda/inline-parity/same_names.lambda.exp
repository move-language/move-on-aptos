// -- Model dump before env processor pipeline:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor unused checks:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor type parameter check:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor check recursive struct definition:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor unused struct params check:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor access and use check before inlining:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor inlining:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor access and use check after inlining:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor acquires check:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor simplifier:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(|(x: a::MyList, y: b::MyOtherList): (a::MyList, b::MyOtherList)| if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }, x, y)
    }
} // end 0x42::c


// -- Model dump after env processor lambda-lifting:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(closure c::test$lambda$1(), x, y)
    }
    private fun test$lambda$1(x: a::MyList,y: b::MyOtherList) {
        if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }
    }
} // end 0x42::c


// -- Model dump after env processor specification checker:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(closure c::test$lambda$1(), x, y)
    }
    private fun test$lambda$1(x: a::MyList,y: b::MyOtherList) {
        if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }
    }
} // end 0x42::c


// -- Model dump after env processor specification rewriter:
module 0x42::b {
    struct MyOtherList {
        len: u64,
    }
    public fun len(self: &MyOtherList): u64 {
        select b::MyOtherList.len<&MyOtherList>(self)
    }
} // end 0x42::b
module 0x42::a {
    struct MyList {
        len: u64,
    }
    public fun len(self: &MyList): u64 {
        select a::MyList.len<&MyList>(self)
    }
} // end 0x42::a
module 0x42::c {
    use 0x42::a; // resolved as: 0x42::a
    use 0x42::b; // resolved as: 0x42::b
    private fun foo(f: |(a::MyList, b::MyOtherList)|,x: a::MyList,y: b::MyOtherList) {
        (f)(x, y)
    }
    private fun test(x: a::MyList,y: b::MyOtherList) {
        c::foo(closure c::test$lambda$1(), x, y)
    }
    private fun test$lambda$1(x: a::MyList,y: b::MyOtherList) {
        if Eq<u64>(Add<u64>(a::len(Borrow(Immutable)(x)), b::len(Borrow(Immutable)(y))), 1) {
          Tuple()
        } else {
          Abort(1)
        }
    }
} // end 0x42::c



Diagnostics:
error: Calls to function values other than inline function parameters not yet supported
   ┌─ tests/lambda/inline-parity/same_names.move:24:9
   │
24 │         f(x, y)
   │         ^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/same_names.move:30:13
   │
30 │         foo(|x, y| { assert!(x.len() + y.len() == 1, 1) }, x, y)
   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
