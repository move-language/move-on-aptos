// -- Model dump before env processor pipeline:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(|(x: u64, _: u64, z: u64): (u64, u64, u64)| Mul<u64>(x, z), |(_: u64, y: u64, _: u64): (u64, u64, u64)| y, 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
} // end 0x42::Test


// -- Model dump after env processor lambda-lifting:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(closure Test::test$lambda$1(), closure Test::test$lambda$2(), 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
    private fun test$lambda$1(x: u64,param$1: u64,z: u64): u64 {
        {
          let _: u64 = param$1;
          Mul<u64>(x, z)
        }
    }
    private fun test$lambda$2(param$0: u64,y: u64,param$2: u64): u64 {
        {
          let _: u64 = param$2;
          {
            let _: u64 = param$0;
            y
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor specification checker:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(closure Test::test$lambda$1(), closure Test::test$lambda$2(), 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
    private fun test$lambda$1(x: u64,param$1: u64,z: u64): u64 {
        {
          let _: u64 = param$1;
          Mul<u64>(x, z)
        }
    }
    private fun test$lambda$2(param$0: u64,y: u64,param$2: u64): u64 {
        {
          let _: u64 = param$2;
          {
            let _: u64 = param$0;
            y
          }
        }
    }
} // end 0x42::Test


// -- Model dump after env processor specification rewriter:
module 0x42::Test {
    private fun foo(f: |(u64, u64, u64)|u64,g: |(u64, u64, u64)|u64,x: u64,_: u64,y: u64,z: u64): u64 {
        {
          let r1: u64 = (f)(x: u64 = Add<u64>(x, 1);
          x, y: u64 = Add<u64>(y, 1);
          y, z: u64 = Add<u64>(z, 1);
          z);
          {
            let r2: u64 = (g)(x: u64 = Add<u64>(x, 1);
            x, y: u64 = Add<u64>(y, 1);
            y, z: u64 = Add<u64>(z, 1);
            z);
            Add<u64>(Add<u64>(Add<u64>(Add<u64>(r1, r2), Mul<u64>(3, x)), Mul<u64>(5, y)), Mul<u64>(7, z))
          }
        }
    }
    public fun test() {
        {
          let r: u64 = Test::foo(closure Test::test$lambda$1(), closure Test::test$lambda$2(), 1, 10, 100, 1000);
          if Eq<u64>(r, 9637) {
            Tuple()
          } else {
            Abort(r)
          };
          Tuple()
        }
    }
    private fun test$lambda$1(x: u64,param$1: u64,z: u64): u64 {
        {
          let _: u64 = param$1;
          Mul<u64>(x, z)
        }
    }
    private fun test$lambda$2(param$0: u64,y: u64,param$2: u64): u64 {
        {
          let _: u64 = param$2;
          {
            let _: u64 = param$0;
            y
          }
        }
    }
} // end 0x42::Test



Diagnostics:
error: Calls to function values other than inline function parameters not yet supported
  ┌─ tests/lambda/inline-parity/eval_ignored_param.move:4:11
  │
4 │     let r1 = f({x = x + 1; x}, {y = y + 1; y}, {z = z + 1; z});
  │              ^

error: Calls to function values other than inline function parameters not yet supported
  ┌─ tests/lambda/inline-parity/eval_ignored_param.move:5:11
  │
5 │     let r2 = g({x = x + 1; x}, {y = y + 1; y}, {z  = z + 1 ; z});
  │              ^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/eval_ignored_param.move:10:14
   │
10 │     let r = foo(|x, _, z| x*z, |_, y, _| y, 1, 10, 100, 1000);
   │                 ^^^^^^^^^^^^^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/eval_ignored_param.move:10:29
   │
10 │     let r = foo(|x, _, z| x*z, |_, y, _| y, 1, 10, 100, 1000);
   │                                ^^^^^^^^^^^
