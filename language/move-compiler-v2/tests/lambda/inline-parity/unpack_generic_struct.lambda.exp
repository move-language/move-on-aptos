// -- Model dump before env processor pipeline:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor unused checks:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor type parameter check:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor check recursive struct definition:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor unused struct params check:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor access and use check before inlining:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor inlining:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor access and use check after inlining:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor acquires check:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor simplifier:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, |e: Key| pack m::E<Key>(e));
          m::g<Key>(f, |e: E<Key>| {
            let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
            v = key;
            Tuple()
          });
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
} // end 0x42::m


// -- Model dump after env processor lambda-lifting:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, closure m::foo$lambda$1());
          m::g<Key>(f, closure m::foo$lambda$2(v));
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
    private fun foo$lambda$1<Key>(e: Key): E<Key> {
        pack m::E<Key>(e)
    }
    private fun foo$lambda$2<Key>(v: &mut Key,e: E<Key>) {
        {
          let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
          v = key;
          Tuple()
        }
    }
} // end 0x42::m


// -- Model dump after env processor specification checker:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, closure m::foo$lambda$1());
          m::g<Key>(f, closure m::foo$lambda$2(v));
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
    private fun foo$lambda$1<Key>(e: Key): E<Key> {
        pack m::E<Key>(e)
    }
    private fun foo$lambda$2<Key>(v: &mut Key,e: E<Key>) {
        {
          let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
          v = key;
          Tuple()
        }
    }
} // end 0x42::m


// -- Model dump after env processor specification rewriter:
module 0x42::m {
    use std::vector;
    struct E<Key> {
        key: Key,
    }
    struct Option<Element> {
        vec: vector<Element>,
    }
    public fun destroy_none<Element>(t: Option<Element>) {
        if m::is_none<Element>(Borrow(Immutable)(t)) {
          Tuple()
        } else {
          Abort(262144)
        };
        {
          let m::Option<Element>{ vec } = t;
          vector::destroy_empty<Element>(vec)
        }
    }
    public fun foo<Key>(data: E<Key>,v: &mut Key) {
        {
          let f: E<Key> = m::h<Key>(data, closure m::foo$lambda$1());
          m::g<Key>(f, closure m::foo$lambda$2(v));
          Tuple()
        }
    }
    public fun g<Key>(x: E<Key>,v: |E<Key>|) {
        (v)(x)
    }
    public fun h<Key>(x: E<Key>,v: |Key|E<Key>): E<Key> {
        {
          let m::E<Key>{ key } = x;
          (v)(key)
        }
    }
    public fun is_none<Element>(t: &Option<Element>): bool {
        vector::is_empty<Element>(Borrow(Immutable)(select m::Option.vec<&Option<Element>>(t)))
    }
    private fun foo$lambda$1<Key>(e: Key): E<Key> {
        pack m::E<Key>(e)
    }
    private fun foo$lambda$2<Key>(v: &mut Key,e: E<Key>) {
        {
          let (m::E<Key>{ key }, _x: u64): (E<Key>, u64) = Tuple(e, 3);
          v = key;
          Tuple()
        }
    }
} // end 0x42::m



Diagnostics:
error: Calls to function values other than inline function parameters not yet supported
   ┌─ tests/lambda/inline-parity/unpack_generic_struct.move:24:9
   │
24 │         v(key)
   │         ^

error: Calls to function values other than inline function parameters not yet supported
   ┌─ tests/lambda/inline-parity/unpack_generic_struct.move:28:9
   │
28 │         v(x)
   │         ^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/unpack_generic_struct.move:33:25
   │
33 │           let f = h(data, |e| {
   │ ╭─────────────────────────^
34 │ │             E {key: e}
35 │ │         });
   │ ╰─────────^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/unpack_generic_struct.move:36:14
   │
36 │           g(f, |e| {
   │ ╭──────────────^
37 │ │             let (E { key }, _x) = (e, 3);
38 │ │             *v = key;
39 │ │         });
   │ ╰─────────^
