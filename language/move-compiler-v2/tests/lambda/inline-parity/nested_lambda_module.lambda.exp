// -- Model dump before env processor pipeline:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(|(x: u64, y: u64): (u64, u64)| Add<u64>(x, y), 1, Test1::apply(|(x: u64, y: u64): (u64, u64)| Mul<u64>(x, y), 2, 1))
    }
} // end 0x42::Test


// -- Model dump after env processor lambda-lifting:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(closure Test::test$lambda$1(), 1, Test1::apply(closure Test::test$lambda$2(), 2, 1))
    }
    private fun test$lambda$1(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun test$lambda$2(x: u64,y: u64): u64 {
        Mul<u64>(x, y)
    }
} // end 0x42::Test


// -- Model dump after env processor specification checker:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(closure Test::test$lambda$1(), 1, Test1::apply(closure Test::test$lambda$2(), 2, 1))
    }
    private fun test$lambda$1(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun test$lambda$2(x: u64,y: u64): u64 {
        Mul<u64>(x, y)
    }
} // end 0x42::Test


// -- Model dump after env processor specification rewriter:
module 0x42::Test1 {
    public fun apply(f: |(u64, u64)|u64,x: u64,y: u64): u64 {
        (f)(x, y)
    }
} // end 0x42::Test1
module 0x42::Test {
    use 0x42::Test1; // resolved as: 0x42::Test1
    public fun test(): u64 {
        Test1::apply(closure Test::test$lambda$1(), 1, Test1::apply(closure Test::test$lambda$2(), 2, 1))
    }
    private fun test$lambda$1(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun test$lambda$2(x: u64,y: u64): u64 {
        Mul<u64>(x, y)
    }
} // end 0x42::Test



Diagnostics:
error: Calls to function values other than inline function parameters not yet supported
  ┌─ tests/lambda/inline-parity/nested_lambda_module.move:4:9
  │
4 │         f(x, y)
  │         ^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/nested_lambda_module.move:13:22
   │
13 │         Test1::apply(|x, y| x + y, 1, Test1::apply(|x, y| x * y, 2, 1))
   │                      ^^^^^^^^^^^^

error: Function-typed values not yet supported except as parameters to calls to inline functions
   ┌─ tests/lambda/inline-parity/nested_lambda_module.move:13:52
   │
13 │         Test1::apply(|x, y| x + y, 1, Test1::apply(|x, y| x * y, 2, 1))
   │                                                    ^^^^^^^^^^^^
