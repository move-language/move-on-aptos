// -- Model dump before env processor pipeline:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor unused checks:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor type parameter check:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor check recursive struct definition:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor unused struct params check:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor access and use check before inlining:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor inlining:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor access and use check after inlining:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor acquires check:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor simplifier:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(|x: u64| x, 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor lambda-lifting:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(closure LambdaReturn::test_lambda_symbol_param$lambda$1(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun test_lambda_symbol_param$lambda$1(x: u64): u64 {
        x
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor specification checker:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(closure LambdaReturn::test_lambda_symbol_param$lambda$1(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun test_lambda_symbol_param$lambda$1(x: u64): u64 {
        x
    }
} // end 0x42::LambdaReturn


// -- Model dump after env processor specification rewriter:
module 0x42::LambdaReturn {
    public fun inline_apply2(f: |u64|u64,b: u64): u64 {
        return (f)(b)
    }
    private fun test_lambda_symbol_param() {
        {
          let a: u64 = LambdaReturn::inline_apply2(closure LambdaReturn::test_lambda_symbol_param$lambda$1(), 3);
          if Eq<u64>(a, 3) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    private fun test_lambda_symbol_param$lambda$1(x: u64): u64 {
        x
    }
} // end 0x42::LambdaReturn



Diagnostics:
error: Calls to function values other than inline function parameters not yet supported
  ┌─ tests/lambda/inline-parity/lambda_return.move:3:9
  │
3 │     return f(b)
  │            ^

error: Function-typed values not yet supported except as parameters to calls to inline functions
  ┌─ tests/lambda/inline-parity/lambda_return.move:7:24
  │
7 │     let a = inline_apply2(|x| { x }, 3);
  │                           ^^^^^^^^^
