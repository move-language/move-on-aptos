// -- Model dump before env processor pipeline:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor unused checks:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor type parameter check:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor check recursive struct definition:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor check cyclic type instantiation:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor unused struct params check:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check before inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor access and use check after inlining:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor acquires check:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor simplifier:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(|(x: u64, _: u64): (u64, u64)| x, |(_: u64, y: u64): (u64, u64)| y, 10, 100)
    }
} // end 0x42::Test


// -- Model dump after env processor lambda-lifting:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(closure Test::main$lambda$1(), closure Test::main$lambda$2(), 10, 100)
    }
    private fun main$lambda$1(x: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          x
        }
    }
    private fun main$lambda$2(param$0: u64,y: u64): u64 {
        {
          let _: u64 = param$0;
          y
        }
    }
} // end 0x42::Test


// -- Model dump after env processor specification checker:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(closure Test::main$lambda$1(), closure Test::main$lambda$2(), 10, 100)
    }
    private fun main$lambda$1(x: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          x
        }
    }
    private fun main$lambda$2(param$0: u64,y: u64): u64 {
        {
          let _: u64 = param$0;
          y
        }
    }
} // end 0x42::Test


// -- Model dump after env processor specification rewriter:
module 0x42::Test {
    private fun foo(f: |(u64, u64)|u64,g: |(u64, u64)|u64,x: u64,_y: u64): u64 {
        Add<u64>((f)(x, _y), (g)(x, _y))
    }
    public fun main(): u64 {
        Test::foo(closure Test::main$lambda$1(), closure Test::main$lambda$2(), 10, 100)
    }
    private fun main$lambda$1(x: u64,param$1: u64): u64 {
        {
          let _: u64 = param$1;
          x
        }
    }
    private fun main$lambda$2(param$0: u64,y: u64): u64 {
        {
          let _: u64 = param$0;
          y
        }
    }
} // end 0x42::Test



Diagnostics:
error: Calls to function values other than inline function parameters not yet supported
  ┌─ tests/lambda/inline-parity/masking.move:4:9
  │
4 │         f(x, _y) + g(x, _y)
  │         ^

error: Calls to function values other than inline function parameters not yet supported
  ┌─ tests/lambda/inline-parity/masking.move:4:20
  │
4 │         f(x, _y) + g(x, _y)
  │                    ^

error: Function-typed values not yet supported except as parameters to calls to inline functions
  ┌─ tests/lambda/inline-parity/masking.move:8:13
  │
8 │         foo(|x, _| x, |_, y| y, 10, 100)
  │             ^^^^^^^^

error: Function-typed values not yet supported except as parameters to calls to inline functions
  ┌─ tests/lambda/inline-parity/masking.move:8:23
  │
8 │         foo(|x, _| x, |_, y| y, 10, 100)
  │                       ^^^^^^^^
