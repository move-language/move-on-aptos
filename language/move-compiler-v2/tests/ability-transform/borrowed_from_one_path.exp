============ initial bytecode ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &0x42::m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
  0: $t5 := 0
  1: $t4 := ==($t0, $t5)
  2: if ($t4) goto 3 else goto 8
  3: label L0
  4: $t7 := 0x1
  5: $t6 := borrow_global<0x42::m::R>($t7)
  6: $t3 := borrow_field<0x42::m::R>.data($t6)
  7: goto 10
  8: label L1
  9: $t3 := infer($t1)
 10: label L2
 11: $t9 := 0
 12: $t8 := vector::borrow<u64>($t3, $t9)
 13: $t2 := read_ref($t8)
 14: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &0x42::m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # live vars: $t0, $t1
  0: $t5 := 0
     # live vars: $t0, $t1, $t5
  1: $t4 := ==($t0, $t5)
     # live vars: $t1, $t4
  2: if ($t4) goto 3 else goto 8
     # live vars: $t1
  3: label L0
     # live vars:
  4: $t7 := 0x1
     # live vars: $t7
  5: $t6 := borrow_global<0x42::m::R>($t7)
     # live vars: $t6
  6: $t3 := borrow_field<0x42::m::R>.data($t6)
     # live vars: $t3
  7: goto 10
     # live vars: $t1
  8: label L1
     # live vars: $t1
  9: $t3 := infer($t1)
     # live vars: $t3
 10: label L2
     # live vars: $t3
 11: $t9 := 0
     # live vars: $t3, $t9
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # live vars: $t8
 13: $t2 := read_ref($t8)
     # live vars: $t2
 14: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &0x42::m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # live vars: $t0, $t1
  0: $t5 := 0
     # live vars: $t0, $t1, $t5
  1: $t4 := ==($t0, $t5)
     # live vars: $t1, $t4
  2: if ($t4) goto 3 else goto 8
     # live vars: $t1
  3: label L0
     # live vars:
  4: $t7 := 0x1
     # live vars: $t7
  5: $t6 := borrow_global<0x42::m::R>($t7)
     # live vars: $t6
  6: $t3 := borrow_field<0x42::m::R>.data($t6)
     # live vars: $t3
  7: goto 10
     # live vars: $t1
  8: label L1
     # live vars: $t1
  9: $t3 := infer($t1)
     # live vars: $t3
 10: label L2
     # live vars: $t3
 11: $t9 := 0
     # live vars: $t3, $t9
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # live vars: $t8
 13: $t2 := read_ref($t8)
     # live vars: $t2
 14: return $t2
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &0x42::m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # live vars: $t0, $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: $t5 := 0
     # live vars: $t0, $t1, $t5
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  1: $t4 := ==($t0, $t5)
     # live vars: $t1, $t4
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  2: if ($t4) goto 3 else goto 8
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  3: label L0
     # live vars:
     # refs: []
     #
  4: $t7 := 0x1
     # live vars: $t7
     # refs: []
     #
  5: $t6 := borrow_global<0x42::m::R>($t7)
     # live vars: $t6
     # refs: [$t6 => #6]
     # #6
     #   <no edges>
     # #root
     #   -> #6 via [struct `m::R`] at line 12
     #
  6: $t3 := borrow_field<0x42::m::R>.data($t6)
     # live vars: $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
  7: goto 10
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  8: label L1
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  9: $t3 := infer($t1)
     # live vars: $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
 10: label L2
     # live vars: $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
 11: $t9 := 0
     # live vars: $t3, $t9
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # live vars: $t8
     # refs: [$t8 => #8]
     # #8
     #   <no edges>
     # #root
     #   -> #8 via [struct `m::R`] at line 16
     #
 13: $t2 := read_ref($t8)
     # live vars: $t2
     # refs: []
     #
 14: return $t2
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &0x42::m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  0: $t5 := 0
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t5
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  1: $t4 := ==($t0, $t5)
     # abort state: {returns,aborts}
     # live vars: $t1, $t4
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  2: if ($t4) goto 3 else goto 8
     # abort state: {returns,aborts}
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  3: label L0
     # abort state: {returns,aborts}
     # live vars:
     # refs: []
     #
  4: $t7 := 0x1
     # abort state: {returns,aborts}
     # live vars: $t7
     # refs: []
     #
  5: $t6 := borrow_global<0x42::m::R>($t7)
     # abort state: {returns,aborts}
     # live vars: $t6
     # refs: [$t6 => #6]
     # #6
     #   <no edges>
     # #root
     #   -> #6 via [struct `m::R`] at line 12
     #
  6: $t3 := borrow_field<0x42::m::R>.data($t6)
     # abort state: {returns,aborts}
     # live vars: $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
  7: goto 10
     # abort state: {returns,aborts}
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  8: label L1
     # abort state: {returns,aborts}
     # live vars: $t1
     # refs: [$t1 => #1]
     # #1
     #   <no edges>
     # #root
     #   <no edges>
     #
  9: $t3 := infer($t1)
     # abort state: {returns,aborts}
     # live vars: $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
 10: label L2
     # abort state: {returns,aborts}
     # live vars: $t3
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
 11: $t9 := 0
     # abort state: {returns,aborts}
     # live vars: $t3, $t9
     # refs: [$t3 => #3]
     # #3
     #   <no edges>
     # #root
     #   -> #3 via [struct `m::R`] at line 12
     #
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # abort state: {returns}
     # live vars: $t8
     # refs: [$t8 => #8]
     # #8
     #   <no edges>
     # #root
     #   -> #8 via [struct `m::R`] at line 16
     #
 13: $t2 := read_ref($t8)
     # abort state: {returns}
     # live vars: $t2
     # refs: []
     #
 14: return $t2
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &0x42::m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
  0: $t5 := 0
  1: $t4 := ==($t0, $t5)
  2: if ($t4) goto 3 else goto 9
  3: label L0
  4: drop($t1)
  5: $t7 := 0x1
  6: $t6 := borrow_global<0x42::m::R>($t7)
  7: $t3 := borrow_field<0x42::m::R>.data($t6)
  8: goto 11
  9: label L1
 10: $t3 := move($t1)
 11: label L2
 12: $t9 := 0
 13: $t8 := vector::borrow<u64>($t3, $t9)
 14: $t2 := read_ref($t8)
 15: return $t2
}
