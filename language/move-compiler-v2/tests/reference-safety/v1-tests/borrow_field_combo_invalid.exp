
Diagnostics:
error: cannot borrow field `f1` of local `f1` which is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:14:18
   │
14 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ borrow attempted here
15 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `c` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:15:9
   │
12 │         let inner = &mut outer.s1;
   │                     ------------- previously mutably borrowed here
   ·
15 │         *c;
   │         ^^ read attempted here
16 │         *inner;
   │         ------ conflicting reference `inner` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:16:9
   │
13 │         let c; if (cond) c = copy inner else c = &mut outer.s1;
   │                              ---------- previously mutably borrowed here
14 │         let f1 = &inner.f1;
   │                  --------- field `f1` previously borrowed here
15 │         *c;
16 │         *inner;
   │         ^^^^^^ read attempted here
17 │         *f1;
   │         --- conflicting reference `f1` used here
18 │         *inner;
19 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:18:9
   │
13 │         let c; if (cond) c = copy inner else c = &mut outer.s1;
   │                              ---------- previously mutably borrowed here
   ·
18 │         *inner;
   │         ^^^^^^ read attempted here
19 │         *c;
   │         -- conflicting reference `c` used here

error: cannot borrow field `f1` of local `f1` which is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:25:18
   │
25 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ borrow attempted here
26 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `c` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:26:9
   │
23 │         let inner = &mut outer.s1;
   │                     ------------- previously mutably borrowed here
   ·
26 │         *c;
   │         ^^ read attempted here
27 │         *inner;
   │         ------ conflicting reference `inner` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:27:9
   │
24 │         let c; if (cond) c = id_mut(copy inner) else c = &mut outer.s1;
   │                              ------------------ previously mutably borrowed here
25 │         let f1 = &inner.f1;
   │                  --------- field `f1` previously borrowed here
26 │         *c;
27 │         *inner;
   │         ^^^^^^ read attempted here
28 │         *f1;
   │         --- conflicting reference `f1` used here
29 │         *inner;
30 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:29:9
   │
24 │         let c; if (cond) c = id_mut(copy inner) else c = &mut outer.s1;
   │                              ------------------ previously mutably borrowed here
   ·
29 │         *inner;
   │         ^^^^^^ read attempted here
30 │         *c;
   │         -- conflicting reference `c` used here

error: cannot mutably borrow field `f1` of local `f1` which is already borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:36:18
   │
35 │         let c; if (cond) c = copy inner else c = &mut outer.s1;
   │                              ---------- previously mutably borrowed here
36 │         let f1 = &mut inner.f1;
   │                  ^^^^^^^^^^^^^ borrow attempted here
37 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `c` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:37:9
   │
34 │         let inner = &mut outer.s1;
   │                     ------------- previously mutably borrowed here
   ·
37 │         *c;
   │         ^^ read attempted here
38 │         *inner;
   │         ------ conflicting reference `inner` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:38:9
   │
35 │         let c; if (cond) c = copy inner else c = &mut outer.s1;
   │                              ---------- previously mutably borrowed here
36 │         let f1 = &mut inner.f1;
   │                  ------------- field `f1` previously mutably borrowed here
37 │         *c;
38 │         *inner;
   │         ^^^^^^ read attempted here
39 │         *f1;
   │         --- conflicting reference `f1` used here
40 │         *inner;
41 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:40:9
   │
35 │         let c; if (cond) c = copy inner else c = &mut outer.s1;
   │                              ---------- previously mutably borrowed here
   ·
40 │         *inner;
   │         ^^^^^^ read attempted here
41 │         *c;
   │         -- conflicting reference `c` used here

error: cannot mutably borrow field `f1` of local `f1` which is already borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:47:18
   │
46 │         let c; if (cond) c = id_mut(copy inner) else c = &mut outer.s1;
   │                              ------------------ previously mutably borrowed here
47 │         let f1 = &mut inner.f1;
   │                  ^^^^^^^^^^^^^ borrow attempted here
48 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `c` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:48:9
   │
45 │         let inner = &mut outer.s1;
   │                     ------------- previously mutably borrowed here
   ·
48 │         *c;
   │         ^^ read attempted here
49 │         *inner;
   │         ------ conflicting reference `inner` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:49:9
   │
46 │         let c; if (cond) c = id_mut(copy inner) else c = &mut outer.s1;
   │                              ------------------ previously mutably borrowed here
47 │         let f1 = &mut inner.f1;
   │                  ------------- field `f1` previously mutably borrowed here
48 │         *c;
49 │         *inner;
   │         ^^^^^^ read attempted here
50 │         *f1;
   │         --- conflicting reference `f1` used here
51 │         *inner;
52 │         *c;
   │         -- conflicting reference `c` used here

error: cannot read local `inner` since it is mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:51:9
   │
46 │         let c; if (cond) c = id_mut(copy inner) else c = &mut outer.s1;
   │                              ------------------ previously mutably borrowed here
   ·
51 │         *inner;
   │         ^^^^^^ read attempted here
52 │         *c;
   │         -- conflicting reference `c` used here

error: cannot borrow field `f1` of local `f1` which is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:58:18
   │
57 │         let c; if (cond) c = &mut inner.f1 else c = &mut inner.f2;
   │                              ------------- field `f1` previously mutably borrowed here
58 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ borrow attempted here
59 │         *f1;
60 │         *c;
   │         -- conflicting reference `c` used here

error: cannot borrow field `f1` of local `f1` which is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo_invalid.move:67:18
   │
66 │         let c; if (cond) c = id_mut(&mut inner.f1) else c = &mut inner.f1;
   │                              --------------------- field `f1` previously mutably borrowed here
67 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ borrow attempted here
68 │         *f1;
69 │         *c;
   │         -- conflicting reference `c` used here
