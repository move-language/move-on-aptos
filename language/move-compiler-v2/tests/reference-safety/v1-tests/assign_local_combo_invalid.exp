
Diagnostics:
error: cannot drop local `s` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/assign_local_combo_invalid.move:14:9
   │
13 │         if (cond) f = &s.f else f = &s.g;
   │                       ----          ---- field `g` via local `s` previously borrowed here
   │                       │
   │                       field `f` via local `s` previously borrowed here
14 │         s = S { f: 0, g: 0 };
   │         ^^^^^^^^^^^^^^^^^^^^ dropped here
15 │         *f;
   │         -- conflicting reference `f` used here

error: cannot drop local `s` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/assign_local_combo_invalid.move:23:9
   │
22 │         if (cond) f = &mut s.f else f = &mut other.f;
   │                       -------- field `f` via local `s` previously mutably borrowed here
23 │         s = S { f: 0, g: 0 };
   │         ^^^^^^^^^^^^^^^^^^^^ dropped here
24 │         *f;
   │         -- conflicting reference `f` used here

error: cannot drop local `s` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/assign_local_combo_invalid.move:32:9
   │
31 │         if (cond) f = &mut s else f = other;
   │                       ------ local `s` previously mutably borrowed here
32 │         s = S { f: 0, g: 0 };
   │         ^^^^^^^^^^^^^^^^^^^^ dropped here
33 │         *f;
   │         -- conflicting reference `f` used here

error: cannot drop local `s` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/assign_local_combo_invalid.move:41:9
   │
40 │         if (cond) f = id_mut(&mut s) else f = other;
   │                       -------------- local `s` previously mutably borrowed here
41 │         s = S { f: 0, g: 0 };
   │         ^^^^^^^^^^^^^^^^^^^^ dropped here
42 │         *f;
   │         -- conflicting reference `f` used here

error: cannot drop local `s` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/assign_local_combo_invalid.move:49:19
   │
48 │         let f = &s.f;
   │                 ---- field `f` via local `s` previously borrowed here
49 │         if (cond) s = S { f: 0, g: 0 };
   │                   ^^^^^^^^^^^^^^^^^^^^ dropped here
50 │         *f;
   │         -- conflicting reference `f` used here
