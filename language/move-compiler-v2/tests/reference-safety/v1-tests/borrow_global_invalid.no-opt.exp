
Diagnostics:
error: cannot borrow `M::R` since it is already mutably borrowed
  ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:6:18
  │
5 │         let r1 = borrow_global_mut<R>(addr);
  │                  -------------------------- struct `M::R` previously mutably borrowed here
6 │         let r2 = borrow_global<R>(addr);
  │                  ^^^^^^^^^^^^^^^^^^^^^^ borrow attempted here
7 │         r1.f = r2.f
  │         ---- conflicting reference `r1` used here

error: cannot borrow `M::R` since it is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:12:18
   │
11 │         let f = &mut borrow_global_mut<R>(addr).f;
   │                 --------------------------------- struct `M::R` previously mutably borrowed here
12 │         let r2 = borrow_global<R>(addr);
   │                  ^^^^^^^^^^^^^^^^^^^^^^ borrow attempted here
13 │         *f = r2.f
   │         --------- conflicting reference `f` used here

error: cannot borrow `M::R` since it is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:18:18
   │
17 │         let r1 = borrow_global_mut<R>(addr);
   │                  -------------------------- struct `M::R` previously mutably borrowed here
18 │         let f = &borrow_global<R>(addr).f;
   │                  ^^^^^^^^^^^^^^^^^^^^^^ borrow attempted here
19 │         r1.f = *f
   │         ---- conflicting reference `r1` used here

error: cannot mutably borrow `M::R` since it is already borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:24:18
   │
23 │         let r2 = borrow_global<R>(addr);
   │                  ---------------------- struct `M::R` previously borrowed here
24 │         let r1 = borrow_global_mut<R>(addr);
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow attempted here
25 │         r1.f = r2.f
   │                ---- conflicting reference `r2` used here

error: cannot borrow `M::R` since it is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:30:18
   │
29 │         let f = &mut borrow_global_mut<R>(addr).f;
   │                 --------------------------------- struct `M::R` previously mutably borrowed here
30 │         let r2 = borrow_global<R>(addr);
   │                  ^^^^^^^^^^^^^^^^^^^^^^ borrow attempted here
31 │         *f = r2.f
   │         --------- conflicting reference `f` used here

error: cannot borrow `M::R` since it is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:36:18
   │
35 │         let r1 = borrow_global_mut<R>(addr);
   │                  -------------------------- struct `M::R` previously mutably borrowed here
36 │         let f = &borrow_global<R>(addr).f;
   │                  ^^^^^^^^^^^^^^^^^^^^^^ borrow attempted here
37 │         r1.f = *f
   │         ---- conflicting reference `r1` used here

error: cannot borrow `M::R` since it is already mutably borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_global_invalid.move:43:18
   │
42 │         let r1; if (cond) r1 = borrow_global_mut<R>(addr) else r1 = &mut r;
   │                                -------------------------- struct `M::R` previously mutably borrowed here
43 │         let f = &borrow_global<R>(addr).f;
   │                  ^^^^^^^^^^^^^^^^^^^^^^ borrow attempted here
44 │         r1.f = *f;
   │         ---- conflicting reference `r1` used here
