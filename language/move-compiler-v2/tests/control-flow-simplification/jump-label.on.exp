============ after ControlFlowGraphSimplifier: ================

[variant baseline]
fun test::test<#0>($t0: vector<u8>): #0 {
     var $t1: #0
     var $t2: string::String
     var $t3: bool
     var $t4: string::String
     var $t5: string::String
     var $t6: vector<u8>
     var $t7: bool
     var $t8: bool
     var $t9: string::String
     var $t10: string::String
     var $t11: vector<u8>
     var $t12: bool
     var $t13: bool
     var $t14: string::String
     var $t15: string::String
     var $t16: vector<u8>
     var $t17: bool
     var $t18: u64
  0: $t2 := test::foo<#0>()
  1: $t4 := copy($t2)
  2: $t6 := [98, 111, 111, 108]
  3: $t5 := string::utf8($t6)
  4: $t3 := ==($t4, $t5)
  5: if ($t3) goto 6 else goto 10
  6: label L0
  7: $t7 := test::baz<bool>($t0)
  8: $t1 := test::bar<#0>($t7)
  9: return $t1
 10: label L1
 11: $t9 := copy($t2)
 12: $t11 := [117, 56]
 13: $t10 := string::utf8($t11)
 14: $t8 := ==($t9, $t10)
 15: if ($t8) goto 16 else goto 20
 16: label L3
 17: $t12 := test::baz<bool>($t0)
 18: $t1 := test::bar<#0>($t12)
 19: return $t1
 20: label L4
 21: $t14 := move($t2)
 22: $t16 := [117, 54, 52]
 23: $t15 := string::utf8($t16)
 24: $t13 := ==($t14, $t15)
 25: if ($t13) goto 26 else goto 30
 26: label L6
 27: $t17 := test::baz<bool>($t0)
 28: $t1 := test::bar<#0>($t17)
 29: return $t1
 30: label L7
 31: $t18 := 0
 32: abort($t18)
}


[variant baseline]
fun test::bar<#0>($t0: bool): #0 {
     var $t1: #0 [unused]
     var $t2: u64
  0: $t2 := 0
  1: abort($t2)
}


[variant baseline]
fun test::baz<#0>($t0: vector<u8>): #0 {
     var $t1: #0 [unused]
     var $t2: u64
  0: $t2 := 0
  1: abort($t2)
}


[variant baseline]
fun test::foo<#0>(): string::String {
     var $t0: string::String [unused]
     var $t1: u64
  0: $t1 := 0
  1: abort($t1)
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.test {
use 0000000000000000000000000000000000000000000000000000000000000001::string;




test<Ty0>(Arg0: vector<u8>): Ty0 /* def_idx: 0 */ {
L1:	loc0: String
L2:	loc1: String
L3:	loc2: String
B0:
	0: Call foo<Ty0>(): String
	1: StLoc[1](loc0: String)
	2: CopyLoc[1](loc0: String)
	3: StLoc[2](loc1: String)
	4: LdConst[0](Vector(U8): [4, 98, 111, 111, 108])
	5: Call string::utf8(vector<u8>): String
	6: StLoc[3](loc2: String)
	7: MoveLoc[2](loc1: String)
	8: MoveLoc[3](loc2: String)
	9: Eq
	10: BrFalse(15)
B1:
	11: MoveLoc[0](Arg0: vector<u8>)
	12: Call baz<bool>(vector<u8>): bool
	13: Call bar<Ty0>(bool): Ty0
	14: Ret
B2:
	15: CopyLoc[1](loc0: String)
	16: StLoc[2](loc1: String)
	17: LdConst[1](Vector(U8): [2, 117, 56])
	18: Call string::utf8(vector<u8>): String
	19: StLoc[3](loc2: String)
	20: MoveLoc[2](loc1: String)
	21: MoveLoc[3](loc2: String)
	22: Eq
	23: BrFalse(28)
B3:
	24: MoveLoc[0](Arg0: vector<u8>)
	25: Call baz<bool>(vector<u8>): bool
	26: Call bar<Ty0>(bool): Ty0
	27: Ret
B4:
	28: LdConst[2](Vector(U8): [3, 117, 54, 52])
	29: Call string::utf8(vector<u8>): String
	30: StLoc[2](loc1: String)
	31: MoveLoc[1](loc0: String)
	32: MoveLoc[2](loc1: String)
	33: Eq
	34: BrFalse(39)
B5:
	35: MoveLoc[0](Arg0: vector<u8>)
	36: Call baz<bool>(vector<u8>): bool
	37: Call bar<Ty0>(bool): Ty0
	38: Ret
B6:
	39: LdU64(0)
	40: Abort
}
bar<Ty0>(Arg0: bool): Ty0 /* def_idx: 1 */ {
B0:
	0: LdU64(0)
	1: Abort
}
baz<Ty0>(Arg0: vector<u8>): Ty0 /* def_idx: 2 */ {
B0:
	0: LdU64(0)
	1: Abort
}
foo<Ty0>(): String /* def_idx: 3 */ {
B0:
	0: LdU64(0)
	1: Abort
}
}
============ bytecode verification succeeded ========
