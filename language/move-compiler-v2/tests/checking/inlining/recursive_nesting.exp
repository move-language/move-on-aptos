// -- Model dump before bytecode pipeline
module 0x42::mathtest {
    public inline fun mul_div(a: u64,b: u64,c: u64): u64 {
        Cast<u64>(Div<u128>(Mul<u128>(Cast<u128>(a), Cast<u128>(b)), Cast<u128>(c)))
    }
} // end 0x42::mathtest
module 0x42::mathtest2 {
    use 0x42::mathtest; // resolved as: 0x42::mathtest
    public inline fun mul_div2(a: u64,b: u64,c: u64): u64 {
        {
          let (a: u64, b: u64, c: u64): (u64, u64, u64) = Tuple(b, a, c);
          Cast<u64>(Div<u128>(Mul<u128>(Cast<u128>(a), Cast<u128>(b)), Cast<u128>(c)))
        }
    }
} // end 0x42::mathtest2
module 0x42::mathtest3 {
    use 0x42::mathtest2; // resolved as: 0x42::mathtest2
    public inline fun mul_div3(a: u64,b: u64,c: u64): u64 {
        {
          let (a: u64, b: u64, c: u64): (u64, u64, u64) = Tuple(b, a, c);
          {
            let (a: u64, b: u64, c: u64): (u64, u64, u64) = Tuple(b, a, c);
            Cast<u64>(Div<u128>(Mul<u128>(Cast<u128>(a), Cast<u128>(b)), Cast<u128>(c)))
          }
        }
    }
} // end 0x42::mathtest3
module 0x42::test {
    use 0x42::mathtest; // resolved as: 0x42::mathtest
    use 0x42::mathtest2; // resolved as: 0x42::mathtest2
    use 0x42::mathtest3; // resolved as: 0x42::mathtest3
    private fun test_nested_mul_div() {
        if true {
          Tuple()
        } else {
          Abort(0)
        };
        Tuple()
    }
} // end 0x42::test


============ bytecode verification succeeded ========
