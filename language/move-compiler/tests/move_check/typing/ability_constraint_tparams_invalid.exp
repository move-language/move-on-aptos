error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:21:9
   │
 7 │     fun c<T: copy>() {}
   │              ---- 'copy' constraint declared here
   ·
17 │         TnoC: drop + store + key,
   │         ---- To satisfy the constraint, the 'copy' ability would need to be added here
   ·
21 │         c<TnoC>();
   │         ^^^^^^^^^
   │         │ │
   │         │ The type 'TnoC' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:22:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'copy' ability would need to be added here
   ·
 7 │     fun c<T: copy>() {}
   │              ---- 'copy' constraint declared here
   ·
22 │         c<Cup<TnoK>>();
   │         ^^^^^^^^^^^^^^
   │         │ │
   │         │ The type '0x42::M::Cup<TnoK>' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:23:9
   │
 7 │     fun c<T: copy>() {}
   │              ---- 'copy' constraint declared here
   ·
23 │         c<Box<TnoC>>();
   │         ^^^^^^^^^^^^^^
   │         │ │   │
   │         │ │   The type '0x42::M::Box<TnoC>' can have the ability 'copy' but the type argument 'TnoC' does not have the required ability 'copy'
   │         │ The type '0x42::M::Box<TnoC>' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:24:9
   │
 8 │     fun k<T: key>() {}
   │              --- 'key' constraint declared here
   ·
18 │         TnoK: copy + drop + store,
   │         ---- To satisfy the constraint, the 'key' ability would need to be added here
   ·
24 │         k<TnoK>();
   │         ^^^^^^^^^
   │         │ │
   │         │ The type 'TnoK' does not have the ability 'key'
   │         'key' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:25:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'key' ability would need to be added here
   ·
 8 │     fun k<T: key>() {}
   │              --- 'key' constraint declared here
   ·
25 │         k<Cup<TnoC>>();
   │         ^^^^^^^^^^^^^^
   │         │ │
   │         │ The type '0x42::M::Cup<TnoC>' does not have the ability 'key'
   │         'key' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:26:9
   │
 8 │     fun k<T: key>() {}
   │              --- 'key' constraint declared here
   ·
26 │         k<Box<Cup<TnoC>>>();
   │         ^^^^^^^^^^^^^^^^^^^
   │         │ │   │
   │         │ │   The type '0x42::M::Box<0x42::M::Cup<TnoC>>' can have the ability 'key' but the type argument '0x42::M::Cup<TnoC>' does not have the required ability 'store'
   │         │ The type '0x42::M::Box<0x42::M::Cup<TnoC>>' does not have the ability 'key'
   │         'key' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:27:9
   │
 9 │     fun cds<T: copy + drop + store>() {}
   │                ---- 'copy' constraint declared here
   ·
17 │         TnoC: drop + store + key,
   │         ---- To satisfy the constraint, the 'copy' ability would need to be added here
   ·
27 │         cds<TnoC>();
   │         ^^^^^^^^^^^
   │         │   │
   │         │   The type 'TnoC' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:28:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'copy' ability would need to be added here
   ·
 9 │     fun cds<T: copy + drop + store>() {}
   │                ---- 'copy' constraint declared here
   ·
28 │         cds<Cup<TnoC>>();
   │         ^^^^^^^^^^^^^^^^
   │         │   │
   │         │   The type '0x42::M::Cup<TnoC>' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:28:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'drop' ability would need to be added here
   ·
 9 │     fun cds<T: copy + drop + store>() {}
   │                       ---- 'drop' constraint declared here
   ·
28 │         cds<Cup<TnoC>>();
   │         ^^^^^^^^^^^^^^^^
   │         │   │
   │         │   The type '0x42::M::Cup<TnoC>' does not have the ability 'drop'
   │         'drop' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:28:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'store' ability would need to be added here
   ·
 9 │     fun cds<T: copy + drop + store>() {}
   │                              ----- 'store' constraint declared here
   ·
28 │         cds<Cup<TnoC>>();
   │         ^^^^^^^^^^^^^^^^
   │         │   │
   │         │   The type '0x42::M::Cup<TnoC>' does not have the ability 'store'
   │         'store' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:29:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'copy' ability would need to be added here
   ·
 9 │     fun cds<T: copy + drop + store>() {}
   │                ---- 'copy' constraint declared here
   ·
29 │         cds<Cup<TnoK>>();
   │         ^^^^^^^^^^^^^^^^
   │         │   │
   │         │   The type '0x42::M::Cup<TnoK>' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:29:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'drop' ability would need to be added here
   ·
 9 │     fun cds<T: copy + drop + store>() {}
   │                       ---- 'drop' constraint declared here
   ·
29 │         cds<Cup<TnoK>>();
   │         ^^^^^^^^^^^^^^^^
   │         │   │
   │         │   The type '0x42::M::Cup<TnoK>' does not have the ability 'drop'
   │         'drop' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:29:9
   │
 3 │     struct Cup<T> { f: T }
   │            --- To satisfy the constraint, the 'store' ability would need to be added here
   ·
 9 │     fun cds<T: copy + drop + store>() {}
   │                              ----- 'store' constraint declared here
   ·
29 │         cds<Cup<TnoK>>();
   │         ^^^^^^^^^^^^^^^^
   │         │   │
   │         │   The type '0x42::M::Cup<TnoK>' does not have the ability 'store'
   │         'store' constraint not satisifed

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:30:9
   │
 9 │     fun cds<T: copy + drop + store>() {}
   │                ---- 'copy' constraint declared here
   ·
30 │         cds<Pair<u64, TnoC>>();
   │         ^^^^^^^^^^^^^^^^^^^^^^
   │         │   │         │
   │         │   │         The type '0x42::M::Pair<u64, TnoC>' can have the ability 'copy' but the type argument 'TnoC' does not have the required ability 'copy'
   │         │   The type '0x42::M::Pair<u64, TnoC>' does not have the ability 'copy'
   │         'copy' constraint not satisifed

error[E02001]: duplicate declaration, item, or annotation
   ┌─ tests/move_check/typing/ability_constraint_tparams_invalid.move:35:9
   │
16 │     fun t<
   │         - Alias previously defined here
   ·
35 │     fun t<
   │         ^ Duplicate module member or alias 't'. Top level names in a namespace must be unique

